package com.sap.ibso.ato.training.tools.service.impl;

import java.nio.charset.Charset;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.apache.commons.codec.binary.Base64;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;

import com.sap.ibso.ato.training.tools.service.ClaimGenerator;

@Service
@Primary
public class DefaultClaimGenerator implements ClaimGenerator {
	
private static final String input = "";
	
	public String generate() {
		byte[] bytes = Base64.decodeBase64(input);
		String claimsWithNewline = new String(bytes, Charset.defaultCharset());
		List<String> claims = new ArrayList<String>(Arrays.asList(claimsWithNewline.split("\\r?\\n")));
		
		Random rand = new SecureRandom();
		String randomClaim = claims.get(rand.nextInt(claims.size()));
		return randomClaim;
	}

}
