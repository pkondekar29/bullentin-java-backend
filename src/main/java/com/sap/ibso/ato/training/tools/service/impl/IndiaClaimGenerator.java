package com.sap.ibso.ato.training.tools.service.impl;

import java.nio.charset.Charset;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.apache.commons.codec.binary.Base64;
import org.springframework.stereotype.Service;

import com.sap.ibso.ato.training.tools.service.ClaimGenerator;

@Service
public class IndiaClaimGenerator implements ClaimGenerator {
	
private static final String input = "UmFqaW5pa2FudGgga2lsbGVkIHRoZSBEZWFkIFNlYQpSYWpuaWthbnRoIGNhbiBkaXZpZGUgYnkgemVybwpSYWppbmlrYW50aCBjYW4gbWFrZSBvbmlvbnMgY3J5ClJhamluaWthbnRoIGRvZXMgbm90IG5lZWQgYSB3YXRjaCwgaGUgZGVjaWRlcyB3aGF0IHRpbWUgaXQgaXMKV2hlbiBSYWppbmlrYW50aCBpcyBwbGF5aW5nIGNyaWNrZXQsIHRoZSByYWluIGhhcyB0byBjYW5jZWwgaXRzIHJhaW5pbmcgZHVlIHRvIHRoZSBtYXRjaApUaGVyZSBpcyBubyBDVEwga2V5IGluIFJhamluaWthbnRoJ3Mga2V5Ym9hcmQsIEhlIGlzIGFsd2F5cyBpbiBDb250cm9sCkdob3N0cyBzaXQgYXJvdW5kIGNhbXBmaXJlIGFuZCB0ZWxsIFJhamluaWthbnRoIHN0b3JpZXMKUmFqaW5pa2FudGggYWxyZWFkeSB3ZW50IHRvIE1vb24gYW5kIE1hcnMsIHRoYXQncyB3aHkgdGhlcmUgYXJlIG5vIHNpZ25zIG9mIGxpZmUKT25jZSBhIFBvbGljZSBvZmZpY2VyIGNhdWdodCBSYWppbmlrYW50aCwgdGhlIGNvcCB3YXMgbHVja3kgZW5vdWdoIHRvIGVzY2FwZSB3aXRoIGEgd2FybmluZwpSYWppbmlrYW50aCBjYW4gd2F0Y2ggdGhlIFJhZGlvICEKUmFqaW5pa2FudGggb25jZSB0b29rIDE1IHdpY2tldHMgaW4gYW4gb25lIGRheSBtYXRjaApQZW9wbGUgY2FsbCAxMDAgZm9yIFBvbGljZSBoZWxwLCBQb2xpY2UgY2FsbHMgUmFqaW5pa2FudGggZm9yIEhlbHAKUmFqaW5pa2FudGgga25vd3MgVmljdG9yaWEncyBTZWNyZXQgIQpSYWppbmlrYW50aCBidWlsdCB0aGUgaG9zcGl0YWwgaGUgd2FzIGJvcm4gaW4KSGFydmFyZCBnb3QgaXQncyBNQkEgZnJvbSBSYWppbmlrYW50aApSYWppbmlrYW50aCBrbm93cyB0aGUgbGFzdCBkaWdpdCBvZiBwaQpPbmNlIFJhamluaWthbnRoIGJpdGUgYW4gYXBwbGUgYW5kIHRocmV3IGl0IGF3YXksIG5vdCBpdHMgaXMga25vd24gYXMgQXBwbGUgY29tcHV0ZXJzIGxvZ28KVGhlcmUgaXMgbm8gQXByaWwgMXN0IGluIFJhamluaSBjYWxlbmRhciwgYmVjYXVzZSBubyBvbmUgY2FuIGZvb2wgaGltCkRhcmsgc3BvdHMgb24gdGhlIE1vb24gYXJlIHRoZSByZXN1bHQgb2YgUmFqaW5pa2FudGgncyBzaG9vdGluZyBwcmFjdGljZQpSYWppbmlrYW50aCBjYW4gTGlrZSBhIEZhY2Vib29rIHBvc3QgZXZlbiBiZWZvcmUgaXQgaXMgcG9zdGVkClJhamluaWthbnRoIGRpZWQgYmVmb3JlIDIwIHllYXJzLCBEZWF0aCBkb2Vzbid0IGhhdmUgdGhlIGNvdXJhZ2UgdG8gdGVsbCBoaW0geWV0Ck9uY2UgUmFqaW5pa2FudGgga2lja2VkIGEgbWFuLCBsYXRlciBoZSBpcyByZW1lbWJlcmVkIGZvciBiZWluZyB0aGUgZmlyc3QgTWFuIHRvIExhbmQgb24gTW9vbgpXaGVuIGFueW9uZSBzYXlzICJObyBvbmUgaXMgUGVyZmVjdCIsIFJhamluaWthbnRoIHRha2VzIGl0IGFzIGEgcGVyc29uYWwgaW5zdWx0LgpSYWppbmlrYW50aCBjYW4gZGVsZXRlIHRoZSBSZWN5Y2xlIEJpbiAhCkdtYWlsJ3MgZW1haWwgYWRkcmVzcyBnbWFpbEByYWppbmlrYW50aC5jb20KTW9uYWxpc2EgZ290IGhlciBzbWlsZSBmcm9tIFJhamluaWthbnRoClJhamluaWthbnRoIGtub3cgIkNob2xpIGtlIHBlZWNoZSBreWEgaGFpIgpSYWppbmlrYW50aCBnb3Qgbm9iZWwgcHJpemUgaW4gYWN0aW5nLgpXaGVuIFJhamluaSB3YW50cyB0aGUgbGlnaHRzIG9uLCBoZSBzaW1wbHkgdHVybnMgdGhlIGRhcmsgb2ZmICEKV2hlbiBBbGV4YW5kZXIgQmVsbCBpbnZlbnRlZCB0aGUgdGVsZXBob25lLCBoZSBhbHJlYWR5IGhhZCAzIG1pc3NlZCBjYWxscyBmcm9tIFJhamluaWthbnRoCk9uY2UgUmFqaW5pa2FudGggc2lnbmVkIGEgY2hlcXVlPyBhbmQgdGhlIEJhbmsgYm91bmNlZCEKUmFqaW5pa2FudGggY2FuIGhpdCA2IHNpeGVzIGluIG9uZSBiYWxsClJhamluaWthbnRoIGNhbiBwbGF5IFRlcXVpbGEgc2hvdCBpbiBDcmlja2V0ClJhamluaWthbnRoIHN0b3BwZWQgcGxheWluZyBjcmlja2V0IHRoZXNlIGRheXMsIGJlY2F1c2UgZXZlbiBpZiBoZSBwbGF5cyBhIGRlZmVuc2l2ZSBzaG90LCBpdCBsYW5kcyBvbiBtb29uCk9uY2UgU3RlcGhlbiBIYXdraW5nIHRyaWVkIHRvIGNvbnZpbmNlIFJhamluaWthbnRoLCBIZSBnb3Qgd2hhdCBoZSBkZXNlcnZlZCAuClJhamluaWthbnRoIGNvdW50ZWQgdG8gSW5maW5pdHkgbWFueSB0aW1lcwpJdHMgYSBsaWUgaWYgYW55IGNvdW50cnkgb3RoZXIgdGhhbiBJbmRpYSBzYXlzIHRoYXQgdGhleSBoYXZlIHdlYXBvbnMgb2YgbWFzcyBkZXN0cnVjdGlvbiwgYmVjYXVzZSBSYWppbmlrYW50aCBsaXZlcyBoZXJlLgpSYWppbmlrYW50aCBjYW4gZHJvd24gYSBmaXNoCkhvbGx5d29vZCB3YW50cyB0byBtYWtlIGEgbW92aWUgQWxpZW4gdnMgUmFqaW5pa2FudGgsIGJ1dCB0aGV5IGZlYXIgdGhhdCBSYWpuaSBtYXkgYmVhdCB0aGUgQWxpZW4gaW4ganVzdCBmZXcgc2Vjb25kcyBhbmQgcGVvcGxlIGRvbid0IHdhdGNoIGEgZmV3CnNlY29uZHMgbW92aWUuClJhamluaWthbnRoIGNhbiBwbGF5IGEgVmlvbGluIHdpdGggYSBwaWFubwpSYWppbmlrYW50aCBrbm93cyB3aGF0IGNhbWUgZmlyc3QgRWdnIG9yIENoaWNrZW4gIQpPbmNlIGRlYXRoIGhhcyAiTmVhciBSYWppbmlrYW50aCBleHBlcmllbmNlIgpPbmNlIFJhamluaWthbnRoIGFuZCBTdXBlcm1hbiBoYWQgYSBjb21wZXRpdGlvbiwgVGhlIGxvc2VyIGhhZCB0byB3ZWFyIGhpcyB1bmRlcndlYXIgb3ZlciBoaXMgcGFudHMhCldoZW4gUmFqaW5pa2FudGggdmlzaXRzIEludGVsJ3Mgb2ZmaWNlLCB0aGV5IGNoYW5nZSB0aGVpciBjYXB0aW9uICJSYWppbmkgSW5zaWRlIgpJdHMgb25seSB3aGVuIFJhamluaWthbnRoIGp1bXBlZCBvbnRvIGVhcnRoIGZyb20gb3RoZXIgcGxhbmV0LCBBbGwgdGhlIGRpbm9zYXVycyBleHRpbmN0ZWQKUmFqaW5pa2FudGggY2FuIG1ha2UgZmlyZSB1c2luZyB0d28gaWNlIGN1YmVzClJhamluaWthbnRoIGNhbiBzbGFtIGEgcmV2b2x2aW5nIGRvb3IKR3Vpbm5lc3MgV29ybGQgUmVjb3JkcyByZXF1ZXN0ZWQgUmFqaW5pIHRvIG5vdCBjb21wZXRlLCBlbHNlIHRoZWlyIGJvb2sgYmVjb21lcyBhIHNpbmdsZSBsaW5lICJBbGwgUmVjb3JkcyBXb24gYnkgUmFqaW5pa2FudGgiClBhdWwgVGhlIE9jdG9wdXMgd2FzIGFza2VkIHRvIHByZWRpY3QgUmFqaW5pJ3MgSVE/LiBwb29yIFBhdWwhCkFtaXRhYmggQmFjaGNoYW4gbWF5YmUgYmUgdGhlIGhvc3QgYnV0IG9ubHkgUmFqaW5pa2FudGgga25vd3MgS2F1biBiYW5lZ2EgY3JvcmVwYXRpICEKT25jZSBSYWppbmlrYW50aCBraWNrZWQgYSBob3JzZSBpbiB0aGUgY2hpbi4uIEl0J3MgZGVjZW5kZW50cyB3ZXJlIGZvdW5kIHRvIGJlIGdpcmFmZmVzISEKV2hlbiBSYWppbmlrYW50aCBsb2dzIGludG8gdHdpdHRlciwgdHdpdHRlciBpbmZvcm1zIFJham5pa2FudCBXaGF0J3MgaGFwcGVuaW5nIQpSYWppbmlrYW50aCBCLmNvbSBBY2NvdW50aW5nIEFuc3dlciBQYXBlciBpcyBUZXJtZWQgYXMgIkFjY291bnRpbmcgU3RhbmRhcmRzIgpXaGVuIFJhamluaWthbnRoIHBsYXlzIHNraXBwaW5nLCB3ZSBmYWNlIEVhcnRoIFF1YWtlcyAhClRoZSBlYXJ0aCBzcGlucyBmYXN0ZXIgd2hlbiBSYWppbmlrYW50aCBnb2VzIGZvciBSdW5uaW5nICEKUmFqaW5pa2FudGggY2FuIHNwZWFrIGluIEJyYWlsbGUKUmFqaW5pa2FudGggb25jZSB3ZW50IHRvIFRoZSBWaXJnaW4gSXNsYW5kcywgbGF0ZXIgaXQgaXMga25vdyBhcyAgIlRoZSBJc2xhbmRzIgpSYWppbmlrYW50aCBiZWF0IHRoZSBTdW4gaW4gU3RhcmluZyBhdCBlYWNoIG90aGVyIENvbnRlc3QgIQpSYWppbmlrYW50aCB0ZWFycyBjYW4gY3VyZSB0aGUgQ2FuY2VyLCBidXQgdGhlIHNhZCB0aGluZyBpcyBSYWpuaWthbnRoIG5ldmVyIGNyaWVzClJhamluaWthbnRoIGNhbiByZW1lbWJlciB0aGUgRnV0dXJlICEKUmFqaW5pa2FudGggb25jZSBvcmRlcmVkIGEgcGxhdGUgb2YgaWRsaSBpbiBNY0RvbmFsZCdzLCBhbmQgZ290IGl0LgpSYWppbmlrYW50aCBkb2Vzbid0IGFnZSwgYmVjYXVzZSB0aW1lIGNhbm5vdCBrZWVwIHVwIHdpdGggaGltClJhamluaWthbnRoIGNhbiBwYXN0ZSBzb21ldGhpbmcgZXZlbiBiZWZvcmUgaGUgY29weSBpdApXaGVuIFJhamluaWthbnRoIGxvZ3Mgb24gdG8gZmFjZWJvb2suY29tLCBmYWNlYm9vayB1cGRhdGVzIGl0cyBzdGF0dXMgbWVzc2FnZSEKVGhlcmUgYXJlIG5vdGhpbmcgbGlrZSBzZWFzb25zLCBJdHMganVzdCBSYWppbmlrYW50aCB3aG8gY2hhbmdlcyB0aGUgdGVtcGVyYXR1cmUgd2hlbiBoZSBnZXRzIGJvcmVkICEKUmFqaW5pa2FudGggZG9uJ3QgbGlrZSB0aGUgb3RoZXIgc2lkZSBvZiBNb29uISAgVGhhdCdzIHdoeSBpdHMgbm90IHZpc2libGUgZnJvbSBlYXJ0aApXaHkgUmFqaW5pa2FudGggaGF2ZSBsZXNzIGhhaXIgPz8gSW4gb2xkIGRheXMgcGVvcGxlIHVzZWQgdG8gdXNlIHRoZW0gdG8gQ3V0IERpYW1vbmRzICE=";
	
	public String generate() {
		byte[] bytes = Base64.decodeBase64(input);
		String claimsWithNewline = new String(bytes, Charset.defaultCharset());
		List<String> claims = new ArrayList<String>(Arrays.asList(claimsWithNewline.split("\\r?\\n")));
		
		Random rand = new SecureRandom();
		String randomClaim = claims.get(rand.nextInt(claims.size()));
		return randomClaim;
	}

}
